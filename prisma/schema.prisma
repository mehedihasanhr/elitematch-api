generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                                  Int                           @id @default(autoincrement())
  email                               String                        @unique @db.VarChar(255)
  firstName                           String                        @map("first_name") @db.VarChar(255)
  lastName                            String                        @map("last_name") @db.VarChar(255)
  avatarId                            Int?                          @map("avatar_id")
  avatar                              File?                         @relation(fields: [avatarId], references: [id])
  password                            String                        @map("password") @db.VarChar(255)
  resetToken                          String?                       @map("reset_token") @db.VarChar(255)
  resetTokenExpiry                    DateTime?                     @map("reset_token_expiry")
  stripeCustomerId                    String?                       @map("stripe_customer_id") @db.VarChar(255)
  isVerified                          Boolean                       @default(false) @map("is_verified")
  roleId                              Int?                          @map("role_id")
  role                                Role?                         @relation(fields: [roleId], references: [id])
  matchMaker                          MatchMaker?
  createdAt                           DateTime                      @default(now()) @map("created_at")
  updatedAt                           DateTime                      @updatedAt @map("updated_at")
  createdAgePreferences               AgePreference[]               @relation("AgePreferenceCreator")
  updatedAgePreferences               AgePreference[]               @relation("AgePreferenceUpdatedBy")
  physicalAttributes                  PhysicalAttribute[]           @relation("PhysicalAttributeCreator")
  updatedPhysicalAttributes           PhysicalAttribute[]           @relation("PhysicalAttributeUpdatedBy")
  backgroundPreferences               BackgroundPreference[]        @relation("BackgroundPreferenceCreator")
  updatedBackgroundPreferences        BackgroundPreference[]        @relation("BackgroundPreferenceUpdatedBy")
  partnerQualities                    PartnerQuality[]              @relation("PartnerQualityCreator")
  updatedPartnerQualities             PartnerQuality[]              @relation("PartnerQualityUpdatedBy")
  religions                           Religion[]                    @relation("ReligionCreator")
  updatedReligions                    Religion[]                    @relation("ReligionUpdatedBy")
  ethnicities                         Ethnicity[]                   @relation("EthnicityCreator")
  updatedEthnicities                  Ethnicity[]                   @relation("EthnicityUpdatedBy")
  createdLifeStyles                   LifeStyle[]                   @relation("LifeStyleCreator")
  updatedLifeStyles                   LifeStyle[]                   @relation("LifeStyleUpdatedBy")
  createdLuxuryAlignments             LuxuryAlignment[]             @relation("LuxuryAlignmentCreator")
  updatedLuxuryAlignments             LuxuryAlignment[]             @relation("LuxuryAlignmentUpdatedBy")
  createdSocialCircles                SocialCircle[]                @relation("SocialCircleCreator")
  updatedSocialCircles                SocialCircle[]                @relation("SocialCircleUpdatedBy")
  createdWellnessInterests            WellnessInterest[]            @relation("WellnessInterestCreator")
  updatedWellnessInterests            WellnessInterest[]            @relation("WellnessInterestUpdatedBy")
  createdIntellectualInterests        IntellectualInterest[]        @relation("IntellectualInterestCreator")
  updatedIntellectualInterests        IntellectualInterest[]        @relation("IntellectualInterestUpdatedBy")
  createdPersonalInterests            PersonalInterest[]            @relation("PersonalInterestCreator")
  updatedPersonalInterests            PersonalInterest[]            @relation("PersonalInterestUpdatedBy")
  createdPersonalityTraits            PersonalityTrait[]            @relation("PersonalityTraitCreator")
  updatedPersonalityTraits            PersonalityTrait[]            @relation("PersonalityTraitUpdatedBy")
  createdFamilyAspirations            FamilyAspiration[]            @relation("FamilyAspirationCreator")
  updatedFamilyAspirations            FamilyAspiration[]            @relation("FamilyAspirationUpdatedBy")
  createdRelationshipTimelines        RelationshipTimeline[]        @relation("RelationshipTimelineCreator")
  updatedRelationshipTimelines        RelationshipTimeline[]        @relation("RelationshipTimelineUpdatedBy")
  createdIdealRelationships           IdealRelationship[]           @relation("IdealRelationshipCreator")
  updatedIdealRelationships           IdealRelationship[]           @relation("IdealRelationshipUpdatedBy")
  createdRelationshipExpectations     RelationshipExpectation[]     @relation("RelationshipExpectationCreator")
  updatedRelationshipExpectations     RelationshipExpectation[]     @relation("RelationshipExpectationUpdatedBy")
  createdRelocations                  Relocation[]                  @relation("RelocationCreator")
  updatedRelocations                  Relocation[]                  @relation("RelocationUpdatedBy")
  createdSocialActivities             SocialActivity[]              @relation("SocialActivityCreator")
  updatedSocialActivities             SocialActivity[]              @relation("SocialActivityUpdatedBy")
  createdCulturalReligiousPreferences CulturalReligiousPreference[] @relation("CulturalReligiousPreferenceCreator")
  updatedCulturalReligiousPreferences CulturalReligiousPreference[] @relation("CulturalReligiousPreferenceUpdatedBy")
  createdCoreValues                   CoreValues[]                  @relation("CoreValuesCreator")
  updatedCoreValues                   CoreValues[]                  @relation("CoreValuesUpdatedBy")
  lifeStyle                           LifeStyle[]
  blog                                Blog[]
  comment                             Comment[]
  subscription                        Subscription[]
  profile                             Profile?
  agePreferenceId                     Int?
  relationshipStatus                  RelationshipStatus[]          @relation("RelationshipStatusCreator")
  updatedRelationshipStatus           RelationshipStatus[]          @relation("RelationshipStatusUpdatedBy")
  incomeRange                         IncomeRange[]                 @relation("IncomeRangeCreator")
  updatedIncomeRange                  IncomeRange[]                 @relation("IncomeRangeUpdatedBy")
  educationLevel                      EducationLevel[]              @relation("EducationLevelCreator")
  updatedEducationLevel               EducationLevel[]              @relation("EducationLevelUpdatedBy")
  occupation                          Occupation[]                  @relation("OccupationCreator")
  updatedOccupation                   Occupation[]                  @relation("OccupationUpdatedBy")
  allergies                           Allergy[]                     @relation("AllergyCreator")
  updatedAllergies                    Allergy[]                     @relation("AllergyUpdatedBy")
  notes                               Note[]
  culturalFit                         CulturalFit[]                 @relation("CulturalCreator")
  updateCulturalFit                   CulturalFit[]                 @relation("CulturalUpdatedBy")
  reasonForUsing                      ReasonForUsing[]              @relation("ResonForUsingCreator")
  updateReasonForUsing                ReasonForUsing[]              @relation("ReasonForUsingUpdatedBy")
  preferedDate                        PreferedDate[]                @relation("ReferedDateCreator")
  updateReferedDate                   PreferedDate[]                @relation("ReferedDateUpdatedBy")
  loveLanguage                        LoveLanguage[]                @relation("LoveLanguageCreator")
  updateLoveLanguage                  LoveLanguage[]                @relation("LoveLanguageUpdatedBy")
  matchCouples                        MatchCouple[]                 @relation("MatchMaker")
  matchCouplesA                       MatchCouple[]                 @relation("CoupleA")
  matchCouplesB                       MatchCouple[]                 @relation("CoupleB")
  matchCouplesCreator                 MatchCouple[]                 @relation("MatchCoupleCreator")

  @@map("users")
}

model File {
  id           Int            @id @default(autoincrement())
  originalName String         @map("original_name")
  mimeType     String
  fileSize     Int
  width        Int
  height       Int
  hash         String         @unique
  url          String
  path         String
  extension    String
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  uploadedBy   Int?
  users        User[]
  profiles     Profile[]
  blogs        Blog[]
  logo         SiteMetadata[] @relation("LogoFile")
  favicon      SiteMetadata[] @relation("FaviconFile")

  @@index([originalName], name: "idx_file_original_name")
  @@index([hash], name: "idx_file_hash")
  @@map("files")
}

model FileUsage {
  id        Int      @id @default(autoincrement())
  fileId    Int
  model     String
  modelId   Int      @map("model_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([fileId], name: "idx_file_usage_file_id")
  @@index([modelId], name: "idx_file_usage_model_id")
  @@map("file_usage")
}

model MatchMaker {
  id              Int     @id @default(autoincrement())
  userId          Int     @unique @map("user_id")
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  experienceYears Int     @map("experience_years")
  active          Boolean @default(true)

  @@index([userId], name: "idx_match_maker_user_id")
  @@map("match_makers")
}

enum MatchStatus {
  BAD
  OK
  GOOD
  GREAT
  EXCELLENT
}

enum MatchStage {
  INITIAL
  CONTACTED
  INTERVIEWED
  MEETING_SCHEDULED
  FEEDBACK_RECEIVED
  FOLLOW_UP
  CLOSED
}

model MatchCouple {
  id           Int         @id @default(autoincrement())
  matchMakerId Int         @map("match_maker_id")
  matchMaker   User        @relation("MatchMaker", fields: [matchMakerId], references: [id], onDelete: Cascade)
  coupleAId    Int         @map("couple_a_id")
  coupleA      User        @relation("CoupleA", fields: [coupleAId], references: [id], onDelete: Cascade)
  coupleBId    Int         @map("couple_b_id")
  coupleB      User        @relation("CoupleB", fields: [coupleBId], references: [id], onDelete: Cascade)
  matchStatus  MatchStatus @map("match_status")
  stage        MatchStage  @default(INITIAL)
  isActive     Boolean     @default(true) @map("is_active")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  creatorId    Int         @map("creatorId")
  creator      User        @relation("MatchCoupleCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([matchMakerId], name: "idx_match_couple_match_maker_id")
  @@index([coupleAId], name: "idx_match_couple_couple_a_id")
  @@index([coupleBId], name: "idx_match_couple_couple_b_id")
  @@map("match_couples")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  slug        String       @unique() @db.VarChar(255)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  permissions Permission[]
  user        User[]

  @@map("roles")
}

enum PermissionType {
  create
  update
  read
  delete
}

model Permission {
  id          Int             @id @default(autoincrement())
  name        String          @db.VarChar(255)
  permission  PermissionType?
  model       String          @db.VarChar(255)
  description String?         @db.Text
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  roles       Role[]

  @@index([name, model, permission], name: "idx_unique_permission")
  @@map("permissions")
}

model Profile {
  id                                  Int                           @id @default(autoincrement())
  userId                              Int                           @unique() @map("user_id")
  user                                User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatars                             File[]
  introductionVideoLink               String?                       @map("introduction_video_link") @db.VarChar(255)
  dateOfBirth                         DateTime?                     @map("date_of_birth")
  occupationId                        Int?                          @map("occupation_id")
  occupation                          Occupation?                   @relation(fields: [occupationId], references: [id], onDelete: Cascade)
  educationLevelId                    Int?                          @map("education_level_id")
  educationLevel                      EducationLevel?               @relation(fields: [educationLevelId], references: [id], onDelete: Cascade)
  incomeRangeId                       Int?                          @map("income_range_id")
  incomeRange                         IncomeRange?                  @relation(fields: [incomeRangeId], references: [id], onDelete: Cascade)
  relationshipStatusId                Int?                          @map("relationship_status_id")
  relationshipStatus                  RelationshipStatus?           @relation(fields: [relationshipStatusId], references: [id], onDelete: Cascade)
  gender                              String?                       @db.VarChar(255)
  bio                                 String?                       @db.Text
  city                                String?                       @db.VarChar(255)
  state                               String?                       @db.VarChar(255)
  zipCode                             String?                       @map("zip_code") @db.VarChar(20)
  country                             String?                       @db.VarChar(255)
  height                              String?                       @db.VarChar(50)
  weight                              String?                       @db.VarChar(50)
  noOfChildren                        Int?                          @default(0) @map("no_of_children")
  specificPartnerPreferences          String?                       @map("specific_partner_preferences") @db.Text
  expectationsFromMatchmaker          String?                       @map("expectations_from_matchmaker") @db.Text
  questionForMatchmaker               String?                       @map("question_for_matchmaker") @db.Text
  pastRelationshipExperience          String?                       @map("past_relationship_experience") @db.Text
  lessonsLearnedFromPastRelationships String?                       @map("lessons_learned_from_past_relationships") @db.Text
  patternsToAvoidInRelationships      String?                       @map("patterns_to_avoid_in_relationships") @db.Text
  ethnicities                         Ethnicity[]
  religions                           Religion[]
  partnerQualities                    PartnerQuality[]
  backgroundPreferences               BackgroundPreference[]
  physicalAttributes                  PhysicalAttribute[]
  agePreferences                      AgePreference[]
  lifeStyle                           LifeStyle[]
  coreValues                          CoreValues[]
  culturalReligiousPreferences        CulturalReligiousPreference[]
  socialActivities                    SocialActivity[]
  relocation                          Relocation[]
  relationshipExpectations            RelationshipExpectation[]
  idealRelationships                  IdealRelationship[]
  relationshipTimeline                RelationshipTimeline[]
  familyAspirations                   FamilyAspiration[]
  personalityTraits                   PersonalityTrait[]
  personalInterests                   PersonalInterest[]
  intellectualInterests               IntellectualInterest[]
  wellnessInterests                   WellnessInterest[]
  socialCircles                       SocialCircle[]
  luxuryAlignment                     LuxuryAlignment[]
  allergies                           Allergy[]
  culturalFits                        CulturalFit[]
  reasonsForUsing                     ReasonForUsing[]
  preferedDates                       PreferedDate[]
  loveLanguage                        LoveLanguage[]

  @@map("profiles")
}

model LoveLanguage {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("LoveLanguageCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("LoveLanguageUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int?

  @@map("love-languages")
}

model PreferedDate {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("ReferedDateCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("ReferedDateUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int?

  @@map("prefered_dates")
}

model ReasonForUsing {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("ResonForUsingCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("ReasonForUsingUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int?

  @@map("reasons_for_using")
}

model CulturalFit {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("CulturalCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("CulturalUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int?

  @@map("cultural_fits")
}

model Allergy {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("AllergyCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("AllergyUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("allergies")
}

model RelationshipStatus {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  profiles Profile[]

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("RelationshipStatusCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("RelationshipStatusUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("relationship_statuses")
}

model IncomeRange {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  profiles Profile[]

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("IncomeRangeCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("IncomeRangeUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("income_ranges")
}

model EducationLevel {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  // relation defined on Profile (educationLevelId)
  profiles Profile[]

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("EducationLevelCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("EducationLevelUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("education_levels")
}

model Occupation {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  // relation defined on Profile (occupationId)
  profiles Profile[]

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("OccupationCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("OccupationUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("occupations")
}

model Relocation {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("RelocationCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("RelocationUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("relocations")
}

model LuxuryAlignment {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("LuxuryAlignmentCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("LuxuryAlignmentUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("luxury_alignments")
}

model SocialCircle {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("SocialCircleCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("SocialCircleUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("social_circles")
}

model WellnessInterest {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("WellnessInterestCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("WellnessInterestUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("wellness_interests")
}

model IntellectualInterest {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("IntellectualInterestCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("IntellectualInterestUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("intellectual_interests")
}

model PersonalInterest {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("PersonalInterestCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("PersonalInterestUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("personal_interests")
}

model PersonalityTrait {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("PersonalityTraitCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("PersonalityTraitUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("personality_traits")
}

model FamilyAspiration {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("FamilyAspirationCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("FamilyAspirationUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("family_aspirations")
}

model RelationshipTimeline {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("RelationshipTimelineCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("RelationshipTimelineUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("relationship_timelines")
}

model IdealRelationship {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("IdealRelationshipCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("IdealRelationshipUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("ideal_relationships")
}

model RelationshipExpectation {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("RelationshipExpectationCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("RelationshipExpectationUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("relationship_expectations")
}

model SocialActivity {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("SocialActivityCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("SocialActivityUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("social_activities")
}

model CulturalReligiousPreference {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("CulturalReligiousPreferenceCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("CulturalReligiousPreferenceUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("cultural_religious_preferences")
}

model CoreValues {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("CoreValuesCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("CoreValuesUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("core_values")
}

model LifeStyle {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("LifeStyleCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("LifeStyleUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?

  @@map("life_styles")
}

model AgePreference {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("AgePreferenceCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("AgePreferenceUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int?

  @@map("age_preferences")
}

model PhysicalAttribute {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("PhysicalAttributeCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("PhysicalAttributeUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("physical_attributes")
}

model BackgroundPreference {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("BackgroundPreferenceCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("BackgroundPreferenceUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("background_preferences")
}

model PartnerQuality {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("PartnerQualityCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("PartnerQualityUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("partner_qualities")
}

model Religion {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("ReligionCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("ReligionUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("religions")
}

model Ethnicity {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  profileId Int?     @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  createdBy Int      @map("created_by")
  creator   User     @relation("EthnicityCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy Int      @map("updated_by")
  updator   User     @relation("EthnicityUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("ethnicities")
}

// Blog management
model Blog {
  id           Int           @id @default(autoincrement())
  title        String        @db.VarChar(255)
  slug         String        @unique @db.VarChar(255)
  isFeatured   Boolean       @default(false) @map("is_featured")
  isPopular    Boolean       @default(false) @map("is_popular")
  isTrending   Boolean       @default(false) @map("is_trending")
  content      String        @db.Text
  authorId     Int           @map("author_id")
  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  isPublished  Boolean       @default(false) @map("is_published")
  publishedAt  DateTime?     @map("published_at")
  coverImageId Int           @map("cover_image_id")
  coverImage   File          @relation(fields: [coverImageId], references: [id])
  comments     Comment[]     @relation("BlogToComment")
  blogTags     BlogTag[]
  categoryId   Int?          @map("category_id")
  category     BlogCategory? @relation(fields: [categoryId], references: [id])
  seo          BlogSEO?

  @@map("blogs")
}

model BlogSEO {
  id          Int      @id @default(autoincrement())
  blogId      Int      @unique @map("blog_id")
  title       String   @db.VarChar(255)
  description String   @db.VarChar(500)
  keywords    String   @db.VarChar(255)
  metadata    Json?    @db.Json
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@map("blog_seo")
}

model BlogCategory {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(255)
  slug  String @unique @db.VarChar(255)
  blogs Blog[]

  @@map("blog_categories")
}

model BlogTag {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(255)
  blogs Blog[]

  @@map("blog_tags")
}

model Comment {
  id        Int      @id @default(autoincrement())
  blogId    Int      @map("blog_id")
  userId    Int      @map("user_id")
  content   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  blog      Blog     @relation("BlogToComment", fields: [blogId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Cms {
  id        Int      @id @default(autoincrement())
  type      String   @db.VarChar(100)
  slug      String   @unique @db.VarChar(100)
  title     String   @db.VarChar(255)
  data      Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cms")
}

model SubscriptionPlan {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  description String? @db.Text
  price       Float
  duration    Int     @default(30) @map("duration_days") // Duration in days

  // usage limits
  maxProfileView   Int?    @default(1) @map("max_profile_view")
  maxMessages      Int?    @default(1) @map("max_messages")
  maxVideoCallMake Int?    @default(1) @map("max_video_call_make")
  matchMakerAccess Boolean @map("match_maker_access")
  isActive         Boolean @default(true) @map("is_active")

  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  subscription Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id               Int       @id @default(autoincrement())
  userId           Int       @map("user_id")
  planId           Int       @map("plan_id") // subscription plan id
  startDate        DateTime  @default(now()) @map("start_date")
  endDate          DateTime? @map("end_date")
  profileViewsLeft Int?      @default(0) @map("profile_views_left")
  messagesLeft     Int?      @default(0) @map("messages_left")
  videoCallsLeft   Int?      @default(0) @map("video_calls_left")
  isActive         Boolean   @default(true) @map("is_active")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  user User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Note {
  id       Int      @id @default(autoincrement())
  title    String   @db.VarChar(255)
  content  String   @db.LongText
  date     DateTime @default(now()) @map("date")
  publish  DateTime @map("publish_date")
  isPinned Boolean  @default(false) @map("is_pinned")
  authorId Int      @map("author_id")
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model NewsletterSubscriber {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("newsletter_subscribers")
}

model SiteMetadata {
  id           Int     @id @default(autoincrement())
  title        String  @db.VarChar(255)
  organization String  @db.VarChar(255)
  description  String? @db.Text
  logoId       Int?    @map("logo_id")
  faviconId    Int?    @map("favicon_id")

  logo    File? @relation("LogoFile", fields: [logoId], references: [id])
  favicon File? @relation("FaviconFile", fields: [faviconId], references: [id])

  @@map("site_metadata")
}

enum GoogleScriptType {
  ANALYTICS
  TAG_MANAGER
  ADSENSE
  OTHER
}

model GoogleScript {
  id        Int              @id @default(autoincrement())
  title     String           @db.VarChar(255)
  gtype     GoogleScriptType @map("gtype")
  script    String           @db.LongText
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")

  @@map("google_scripts")
}

model QuickLink {
  id        Int      @id @default(autoincrement())
  label     String   @db.VarChar(100)
  link      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("quick_links")
}
